---
layout: single
title: "homework#1"
date: 2021-04-01 21:14
categories: jekyll update
---

## 첫 번째 과제 

## problem 

: 여러 개의 점들이 좌표 상에 존재한다고 했을 때 가장 가까운 사이값을 가지는 두 점을 찾아내어라. 



**문제해결방법**

1. 각각의 점들을 하나씩 비교하여 거리값을 알아낸 후, 그 중 가장 거리값이 작은 두 점을 찾아낸다.
2. 좌표상의 점을 x축(or y축)에 대하여 정리한 후 n개의 구역으로 나눠서 그 구역들 안에서 가장 가까운 두 점을 찾는다. 찾은 값들 중 가장 작은 값을 구하면 해결. 



**<이번 post에서는 1번 방법을 다뤄볼 것>**

구현할 함수 : main(), cal_distance(), find_closest()

**cal_distance** : x,y좌표 값을 가지고 있는 배열을 받아 각 점 사이의 사이값을 계산하는 함수

**find_closest** : cal_distance에서 계산한 값을 가진 배열을 받아 그 중 가장 작은 값을 찾아내는 함수

-----------------------------

전반적인 코드는 다음과 같다. 

```
public class Nearest {
    public static void cal_distance(int x[], int y[]) {
        int dis[] = new int [(x.length*(x.length-1))/2];
        int n = 0;
        for(int i = 0; i < x.length-1; i++) {
            for(int j = i+1; j < x.length;j++) {
                int result = (x[i]-x[j])*(x[i]-x[j]) + (y[i]-y[j])*(y[i]-y[j]);
                System.out.println(i + " , " + j + " -> " + result);
                dis[n++] = result;
            }
        }
        Nearest.find_closest(dis);
    }
    public static void find_closest(int A[]) {
        int min = A[0];
        for(int i = 1; i < A.length; i++) {
            if(min > A[i]) min = A[i];
        }
        System.out.println("가장 가까운 점들의 거리(제곱상태)는 "+ min);
    }
    public static void main(String args[]) {
        int x[] = {1,8,4,6,3};
        int y[] = {10,3,8,22,16};

        Nearest.cal_distance(x,y);
    }
}

```

이렇게 코드를 실행시키게 되면 결과는 

![코드사진](C:\Users\User\Pictures\컴퓨터 알고리즘\20210401_155920.png)



| <사진이 보이지 않을 경우> --출력되는 결과값                  |
| ------------------------------------------------------------ |
| 0 , 1 -> 98<br/>0 , 2 -> 13<br/>0 , 3 -> 169<br/>0 , 4 -> 40<br/>1 , 2 -> 41<br/>1 , 3 -> 365<br/>1 , 4 -> 194<br/>2 , 3 -> 200<br/>2 , 4 -> 65<br/>3 , 4 -> 45<br/>가장 가까운 점들의 거리(제곱상태)는 13 |

점 0 ~ 점 4까지 중 점 0과 점 2 사이의 거리가 가장 짧을 것을 알아내었다! 

------------------------



제곱이 아닌 루트를 적용한 값(제곱근)을 알고 싶다면 Math.sqrt()를 사용하면 된다. 

| Math.sqrt를 이용한 경우의 코드                               |
| ------------------------------------------------------------ |
| public static void cal_distance(int x[], int y[]) {<br/>    double dis[] = new double [(x.length*(x.length-1)/2)];<br/>    int n = 0;<br/>    for(int i = 0; i<x.length;i++) {<br/>        for(int j = i+1; j<x.length;j++) {<br/>            double result = (x[i]-x[j])*(x[i]-x[j]) + (y[i]-y[j])*(y[i]-y[j])<br/>            result = Math.sqrt(result);<br/>            System.out.println( i +" , " + j + " -> " + result);<br/>            dis[n++] = result;<br/>        }<br/>    }<br/>    Nearest.find_closest(dis);<br/>} |

| 출력되는 결과값                                              |
| ------------------------------------------------------------ |
| 0 , 1 -> 9.899494936611665<br/>0 , 2 -> 3.605551275463989<br/>0 , 3 -> 13.0<br/>0 , 4 -> 6.324555320336759<br/>1 , 2 -> 6.4031242374328485<br/>1 , 3 -> 19,1049731745428<br/>1 , 4 -> 13.92838827718412<br/>2 , 3 -> 14.142135623730951<br/>2 , 4 -> 8.062257774829855<br/>3 , 4 -> 6.708203932499369<br/>가장 가까운 점들의 거리는 3.605551275463989 |

결과값이 제곱근으로 바꿔서 출력되는 것을 볼 수 있다! 

결과는 역시 위에서 봤던 코드와 동일하게 점 0과 점 2가 가장 가깝다는 것.

**Math.sqrt()**는 double형 인자값을 다루기 때문에 결과값들이 실수형인 것을 알 수 있다. 



main()에서 점의 x, y좌표를 초기화시키는 것이 아니라 직접 입력하고 싶다면 **scanner**를 사용하면 된다.

```
import java.util.Scanner; //scanner를 사용하기 위해 작성해야하는 코드 

public static void main(String []args) {
    Scanner scanner = new Scanner(System.in); //scanner 객체 생성
    int x[] = new int [20];  //배열 생성(x좌표 값)
    int y[] = new int [20];  //배열 생성(y좌표 값)
    
    for(int i = 0; i < x.length; i++) {
        x[i] = scanner.nextInt(); //입력받는 값이 int형이므로 
    }
    
    for(int i = 0; i < y.length; i++) {
        y[i] = scanner.nextInt();
    }
    
    Nearest.cal_distance(x,y);
}
```

위에 처럼 코드를 작성하면 사용자가 원하면 좌표값을 직접 입력하여 프로그램을 실행시킬 수 있다. 

**배열의 인덱스 번호**는 0부터 시작하므로 for문의 i값을 0으로 초기화하는 것이 사용하기에 간편하다.

점의 개수가 정해진 것이 아니기 때문에 (배열의 크기만큼 점을 입력한다는 가정하에) for문의 조건식은 x(배열의 이름).length로 범위를 정하는 것이 직접적인 숫자를 입력하는 것보다 좋을 것이다.

_______________________



### cal_distance()

```
    public static void cal_distance(int x[], int y[]) {
        int dis[] = new int [(x.length*(x.length-1))/2];
        int n = 0;
        for(int i = 0; i < x.length-1; i++) {
            for(int j = i+1; j<x.length;j++) {
                int result = (x[i]-x[j])*(x[i]-x[j]) + (y[i]-y[j])*(y[i]-y[j]);
                System.out.println(i + " , " + j + " -> " + result);
                dis[n++] = result;
            }
        }
        Nearest.find_closest(dis);
    }
```

배열 dis[]의 크기 = n개의 점들이 자신을 제외한 다른 모든 점들과 비교되는 횟수

n = 3) 3번

n = 4) 6번

n = 5) 10번 ...

따라서 dis[]의 크기는 **n(n-1) / 2**가 된다. 

작성한 코드에서는 x, y 배열의 크기가 같으므로 어떤 배열의 크기를 사용하든 상관이 없다. 



이중 for문을 사용해서 모든 점들 사이의 거리를 계산한다. 

두 점 사이의 거리는 (x좌표의 차) X (y좌표의 차)에 루트를 씌운 값. 

루트를 씌우지 않아서 대소비교 값은 변하지 않기 때문에 루트를 씌우지 않은 값을 dis[]에 넣어주게 된다. 



이때 계산을 했을 때의 결과값과 함께 어떤 두 점이 선택되었는 지도 함께 출력시켜줌으로써 

거리값과 비교대상을 한 번에 볼 수 있게 된다. 



모든 점들 사이의 값을 구해서 배열에 넣어준 후, 가장 가까운 거리값을 찾기 위해 find_closest함수로 배열을 넘겨준다!



## find_closest()

```
 public static void find_closest(int A[]) {
        int min = A[0];
        for(int i = 1; i < A.length; i++) {
            if(min > A[i]) min = A[i];
        }
        System.out.println("가장 가까운 점들의 거리(제곱상태)는 "+ min);
    }
```

배열의 맨 처음 요소의 값을 가장 작은 값이라고 가정하자. 

가장 작은 값을 저장할 변수 min에 이 값을 대입해준다. 

for문을 통해서 A[0]의 값, 즉 min의 값과 다음 요소들의 값을 비교해주면서 진행을 하는데 이때

**if문**을 통해서 min의 값보다 배열 요소의 값이 작다고 하면 min에 그 값을 대입해주도록 한다.

그 과정을 마지막 인덱스요소까지 반복해주면 min에는 배열의 요소들 중 가장 작은 값이 들어가 있을 것이다. 



결과적으로 그 min값을 출력해주면 가장 가까운 두 점의 거리값을 볼 수 있게 된다.