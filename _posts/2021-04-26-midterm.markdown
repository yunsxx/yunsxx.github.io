---
layout: single
title: "midterm"
date: 2021-04-26 17:45
categories: jekyll update
---

### Strassen Matrix Algorithm

(작성자 : 202001632 류연수)

:: 여러 개의 행렬 A,B,C,D...가 있다고 했을 때 이 행렬들을 곱셈하는 과정에서 모든 행렬을 곱한 값이 최소한의 계산으로 나오도록 하는 알고리즘이라고 할 수 있다. 

3개 이상의 행렬을 곱할 때, 어떤 행렬들을 먼저 곱하느냐에 따라 행렬곱의 계산 횟수가 달라지게 된다. 

**입력 크기가 큰 부분문제에 입력 크기가 작은 부분문제들의 값이 사용되기 때문에 모든 부분문제들의 값을 저장해 둘 필요가 있다.** 따라서 상황에 따라 n차 배열을 만들어 부분문제의 값을 저장해둔다. (부분문제가 어떻게 쪼개지냐에 따라 배열의 형태가 달라질 수 있다.)

:: Dynamic programming(동적 계획 알고리즘)방식으로 구현할 알고리즘. 

**Dynamic programming이란>>** 최적화 문제를 해결하는 알고리즘으로 **입력크기가 작은 문제**들을 우선적으로 해결한 후, 그 결과를 이용해서 **입력크기가 큰 문제**들을 해결하는 방식.

-------------------------------------------------------

전체적인 코드는 다음과 같다. (입력 개수가 5개라고 했을 때)

```
import java.util.Scanner;

public class MatrixChain {

    public static int getMin(int c1, int c2) {
        if(c1 < c2)
            return c1;
        else //c2가 c1보다 작거나 두 수가 같을 때(같을 때는 어떤 값을 반환하든 상관 없음)
            return c2;
    }

    public static void MatrixMul(int a[]) {
        int n = a.length-1; // n = 4
        int Matrix[][] = new int[n][n];

        for(int i = 0; i < n; i++) { // i = 0,1,2,3
            Matrix[i][i] = 0; //대각선 요소 0으로 초기화
        }

        //부분문제가 n-1개 일 때 (=3개)
        for(int i = 0; i < n-1; i++) { // i = 0, 1, 2
            Matrix[i][i+1] = a[i]*a[i+1]*a[i+2];
        }

        //부분문제가 n-2개 일 때 (=2개)
        for(int i = 0; i < n-2; i++) { //i = 0, 1
            int j = i+2;
            int com1 = a[i]*a[j]*a[j+1]+Matrix[i][j-1]; //[0,1]이 [1,2]보다 작은 경우 , [1,2]가 [2,3]보다 작은 경우 ..
            int com2 = a[i]*a[j-1]*a[j+1]+Matrix[i+1][j]; //[1,2]이 [0,1]보다 작은 경우, [2,3]가 [1,2]보다 작은 경우  ..

            Matrix[i][j] = getMin(com1,com2);
        }

        //부분문제가 n-3개 일 때 (=1개)
        for(int i = 0; i < n-3; i++) { // i = 0
            int j = i+3;
            int com1 = a[i]*a[j-1]*a[j+1]+Matrix[i][i+1]+Matrix[j-1][j]; //AB*CD일 경우
            int com2 = a[i]*a[i+1]*a[j+1]+Matrix[i+1][j]; //A*BCD 일 경우
            int com3 = a[i]*a[j]*a[j+1]+Matrix[i][j-1]; //ABC*D 일 경우

            int temp = getMin(com1, com2);
            Matrix[i][j] = getMin(com3, temp); //com1,2,3 중 가장 작은 값
        }

        System.out.println("result = " + Matrix[0][n-1]);
    }

    public static void main(String [] args) {
        Scanner scan = new Scanner(System.in); //scanner 객체 생성
        int arr[] = new int[5];

        for(int i = 0; i < arr.length; i++) {
            arr[i] = scan.nextInt();
        }

        for(int i = 0; i < arr.length; i++) {
            System.out.println(i+ " "+ arr[i]);
        }
        MatrixMul(arr);
    }
}
```

#### 구현한 함수

1. **getMin()** :  전달받은 인수(argument)들의 값을 비교하여 더 작은 값을 반환하는 함수 

2. **main()** : 곱할 행렬의 값을 입력받고 그 값을 토대로 전체적인 프로그램을 실행시키는 함수

3. **MatrixMul()** : 행렬 곱셈을 실행하는 함수

   

#### # getMin()

```
 public static int getMin(int c1, int c2) {
        if(c1 < c2)
            return c1;
        else //c2가 c1보다 작거나 두 수가 같을 때(같을 때는 어떤 값을 반환하든 상관 없음)
            return c2;    
}
```

**(1)** 크기를 비교할 숫자 2개를 paramiter(c1, c2)로 받는다. 

**(2)** if문을 사용하여 크기를 비교하고 더 작은 값을 return 시킨다.

**(3)** c1보다 c2가 작을 경우(or 두 수가 같을 경우)에는 else문으로 처리해주면 된다. 



-----------------------------

#### # main()

```
 public static void main(String [] args) {
        Scanner scan = new Scanner(System.in); //scanner 객체 생성
        int arr[] = new int[5];

        for(int i = 0; i < arr.length; i++) {
            arr[i] = scan.nextInt(); //배열에 값 저장
        }

        for(int i = 0; i < arr.length; i++) {
            System.out.println(i+ " "+ arr[i]);
        }        
        MatrixMul(arr);
}
```

**(1)** 사용자로부터 입력을 받기 위해 scanner객체를 만든다. (scanner를 사용하기 위해 import로 scanner에 대한 정보 경로를 불러온다.)

**(2)** 행렬에 대한 값을 저장할 배열 arr를 만들고

**(3)** scanner로 값을 받아 arr에 저장한다. (for문을 사용할 때 인덱스 번호가 0부터 시작하기 때문에 i는 0부터 시작하는 것이 좋다. )

**(4)** 두 번째 for문은 arr에 값이 잘 들어갔는지 확인하는 용도의 for문이다. 

**(5)** MatrixMul함수에 arr를 보내준다. 



(+) 배열에 저장된 값을 바탕으로 행렬은 다음과 같이 만들어진다. 

행렬 A = arr[0]xarr[1] 크기의 행렬

행렬 B = arr[1]xarr[2] 크기의 행렬

행렬 C = arr[2]xarr[3] 크기의 행렬

행렬 D = arr[3]xarr[4] 크기의 행렬 

...

=> 입력 개수가 n이라면 **n-1개의 행렬**을 만들게 되는 것



------------------------------

#### # MatrixMul()

```
 public static void MatrixMul(int a[]) {
        int n = a.length-1; // n = 4
        int Matrix[][] = new int[n][n];

        for(int i = 0; i < n; i++) { // i = 0,1,2,3
            Matrix[i][i] = 0; //대각선 요소 0으로 초기화
        }

        //부분문제가 n-1개 일 때 (=3개)
        for(int i = 0; i < n-1; i++) { // i = 0, 1, 2
            Matrix[i][i+1] = a[i]*a[i+1]*a[i+2];
        }

        //부분문제가 n-2개 일 때 (=2개)
        for(int i = 0; i < n-2; i++) { //i = 0, 1
            int j = i+2;
            int com1 = a[i]*a[j]*a[j+1]+Matrix[i][j-1]; //[0,1]이 [1,2]보다 작은 경우 , [1,2]가 [2,3]보다 작은 경우 ..
            int com2 = a[i]*a[j-1]*a[j+1]+Matrix[i+1][j]; //[1,2]이 [0,1]보다 작은 경우, [2,3]가 [1,2]보다 작은 경우  ..

            Matrix[i][j] = getMin(com1,com2);
        }

        //부분문제가 n-3개 일 때 (=1개)
        for(int i = 0; i < n-3; i++) { // i = 0
            int j = i+3;
            int com1 = a[i]*a[j-1]*a[j+1]+Matrix[i][i+1]+Matrix[j-1][j]; //AB*CD일 경우
            int com2 = a[i]*a[i+1]*a[j+1]+Matrix[i+1][j]; //A*BCD 일 경우
            int com3 = a[i]*a[j]*a[j+1]+Matrix[i][j-1]; //ABC*D 일 경우

            int temp = getMin(com1, com2);
            Matrix[i][j] = getMin(com3, temp); //com1,2,3 중 가장 작은 값
        }

        System.out.println("result = " + Matrix[0][n-1]);
}
```

**(1)** 부분문제들의 값을 저장할 배열을 만든다. (Matrix[ ] [ ])

**(2)** **대각선 요소들의 값을 0으로 초기화** 시켜준다. 

(서로 다른 행렬들을 곱하지, 자기 자신을 곱하지 않을 것이기에 ex AxA)

**(3)** 첫 번째 for문은 부분문제가 n-1개 일 때의 연산이다. 

:: nxn 배열이 있다고 할 때, 이 경우에는 대각선 요소 다음의 대각선 위치에 값이 저장된다. 

저장되는 값들은 AxB, BxC, CxD...의 연산 횟수가 된다. 

**(4)** 두 번째 for문은 부분문제가 n-2개 일 때의 연산이다.

:: (3)에서 요소들을 저장한 위치 다음의 대각선 위치에 값이 저장된다. 

저장되는 값들은 AxBxC, BxCxD...의 연산 횟수가 된다. 

이때 **(AxB)xC와 Ax(BxC) 중 더 연산 횟수가 적은 경우를 판단**해서 저장할 값을 구한다. 

ex) 전자의 경우, **AxB의 연산횟수와 AxBxC의 연산횟수를 더해서** 최종적인 값을 구하게 된다. 

=> 즉 **전 단계의 부분문제 값이 사용**되는 것. 

**(5)** 세 번째 for문은 부분문제가 n-3개 일 때의 연산이다.

:: (4)에서 요소들을 저장한 위치보다 한 칸 오른쪽 위치에 값들이 저장된다. 

저장되는 값은 **AxBxCxD, (BxCxDxE, CxDxExF...)**의 연산 횟수가 된다. 

이때도 case별로 **(AxBxC)xD와 Ax(BxCxD)와 (AxB)x(CxD)** 중에서 더 작은 연산 값을 가지는 경우를 찾아야한다. 

ex) 첫 번째 경우, (AxBxC)의 연산 횟수와 (AxBxCxD)의 연산 횟수를 더해서 최종적인 값을 구하게 된다. 

ex) 마지막의 경우, 

(AxB)의 연산 횟수와 (BxC)의 연산홧수, (AxBxCxD)의 연산횟수를 더해서 최종적인 값을 구해야한다.

=> (case에 따라 사용되는 값이 다르지만) 이 경우에도 **전 단계의 부분문제 값이 사용**된 것을 알 수 있다. 



**(+)** n개의 matrix가 있다고 하면, 위에 for문의 과정을 n-1번 반복하여 최종값을 얻게 된다. 

: 단계가 진행될수록 **전 단계의 부분문제들의 값**이 필요하기 때문에 이를 **더해주는 연산이 추가**되고 

**case**가 많아진다는 부분을 고려해야한다. 

-------------------------------------------

arr[]에 10, 20, 5, 15, 30을 입력하고 실행시켜보면 결과적으로 4,750이라는 값이 나오는 것을 알 수 있다.

![20210427_150049](https://user-images.githubusercontent.com/80511175/116245648-214b7300-a7a4-11eb-8836-4f06a7dba2f6.png)







