---
layout: single
title : "homework#3"
date : 2021-04-14 18:58
categories: jekyll update
---

## Greedy algorithm

### problem : Knapsack fractional

전체적인 코드는 다음과 같다.

```
import java.util.Scanner;

public class Knapsack {
    private int weight;
    private int price;
    private int cost;

    public Knapsack(int w, int p) {
        super();

        this.weight = w;
        this.price = p;
        this.cost = (p/w);
    }

    public int GetWeight() {
        return weight;
    }

    public int GetPrice() {
        return price;
    }

    public int GetCost() {
        return cost;
    }

    public static Knapsack[] sort(Knapsack [] kp) {
        int max = 0;
        Knapsack change = new Knapsack(0, 0);

        for (int i = 0; i < kp.length - 1; i++) {
            max = kp[i].cost;
            for (int j = i + 1; j < kp.length; j++) {
                if (max < kp[j].cost) {
                    change.weight = kp[i].weight;
                    change.price = kp[i].price;
                    change.cost = kp[i].cost;

                    kp[i].weight = kp[j].weight;
                    kp[i].price = kp[j].price;
                    kp[i].cost = kp[j].cost;

                    kp[j].weight = change.weight;
                    kp[i].price = change.price;
                    kp[i].cost = change.cost;

                    max = kp[j].cost;
                }
            }
        }
        return kp;
    }

    public static void KnapsackPerform(int w[], int p[],int c, int size) {
        Knapsack [] kp = new Knapsack[size];

        for(int i = 0; i<kp.length;i++) {
            kp[i] = new Knapsack(w[i], p[i]); 
            //총 금액, 량, 단위 당 금액을 가지고 있는 클래스형 배열 생성
        }

        kp = sort(kp); //단위 당 금액을 기준으로 배열 정렬 시키는 함수

        Knapsack [] result = new Knapsack[size];

        int current_w = 0;
        int current_v = 0;

        for(int i = 0; i < kp.length; i++) {
            if(c >= current_w + kp[i].weight) {
                current_w += kp[i].GetWeight();
                current_v += kp[i].GetPrice();
                result[i].weight = kp[i].GetWeight();
                result[i].price = kp[i].GetPrice();
            }
            else if(c - current_w > 0) {
                current_w += c - current_w;
                current_v += (c - current_w)*kp[i].GetCost();
                result[i].weight = (c - current_w);
                result[i].price = (c - current_w)*kp[i].GetCost();
            }
        }

        System.out.println("최종 weight 와 price : " + current_w + " , " + current_v);
        for(int i = 0; i < result.length; i++) {
            System.out.println( i + " " + result[i].weight + " " + result[i].price);
        }
    }

    public static void main(String [] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("총 대상의 개수 : ");
        int number = scanner.nextInt();

        int arr_w[] = new int [number];
        int arr_p[] = new int [number];

        System.out.println("대상들의 weight : ");

        for(int i = 0; i < number; i++) {
            arr_w[i] = scanner.nextInt();
        }

        System.out.println("대상들의 price : ");
        for(int i = 0; i < number; i++) {
            arr_p[i] = scanner.nextInt();
        }

        System.out.println("수용량 입력 : ");
        int capacity = scanner.nextInt();

        KnapsackPerform(arr_w,arr_p,capacity, number);
    }
}

```

-------------

#### class 설명

1. class Knapsack는 weight, price, cost에 대한 멤버변수를 가지며, 매개변수가 2개인 메서드를 가지고 있다.
2. 메서드는 입력받은 w, p를 해당 객체의 멤버변수 weight, price에 넣고 매개변수에 간단한 사칙연산을 취해 구한 cost의 값까지 대입해주는 역할을 한다. 
3. 각 GetWeight(), GetPrice(), GetCost()는 객체에 대해 얻고자 하는 값을 간단하게 가져오는 함수라 보면 된다. 



#### 함수 설명

구현한 함수 : KnapsackPerform(), sort() 

1. **KnapsackPerform() :**

(1) 입력받은 값들을 기준으로 **클래스형 배열**에 정보를 할당해주고

(2) 만들어진 배열을 sort함수에 보내 정렬시켜준다.

(3) 결과적으로 선택된 대상들의 양과 금액을 저장할 배열을 만들고

(4) 수용량을 기준으로 **최대한 높은 단위 당 값어치**를 가질 수 있도록 대상들을 선별.

(5) 최종적으로 선택된 무게와 총 값어치, 대상들에 대한 정보를 출력하는 함수이다. 



2. **sort() :** 

(1) 만들어진 클래스형 배열을 매개변수로 받는다

(2) 현재 가장 첫 번째 인덱스에 들어가있는 cost 값이 **가장 큰 값이라 가정**하고 for문을 진행한다.

(3) for문을 진행하는 과정에서 max값 보다 큰 값이 있다면 그 값으로 정보를 change해준다.

(4) 첫 번째 요소부터 마지막 요소까지 모두 이 과정을 거쳐 **내림차순**으로 배열을 정렬하여 반환하는 함수.

